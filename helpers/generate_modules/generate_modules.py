#!/usr/bin/env python

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import shutil
import subprocess
import sys
import hcl


def boilerplate():
    """
    Generate common boilerplate for a Terraform file.

    Returns:
        str: The evaluated boilerplate.
    """
    with open("./test/boilerplate/boilerplate.tf.txt") as fh:
        buf = fh.read()
        buf += "\n\n"
        buf += "// File autogenerated by " + \
            "`helpers/generate_modules/generate_module.py`\n"
        return buf


def root_main_tf(variables):
    """
    Generate the root level `main.tf`.

    Args:
        variables ([str]): A list of variables to pass from the root module
            to the `public-cluster` module.


    Returns:
        str: The contents of the file `main.tf`.
    """

    buf = boilerplate()
    buf += """

module "kubernetes-engine" {
  source = "modules/public-cluster"

"""
    for name in sorted(variables):
        buf += '{name} = "${{var.{name}}}"\n'.format(
            name=name
        )
    buf += "}\n"

    return buf


def root_outputs_tf(outputs):
    """
    Generate the root level `outputs.tf`.

    Args:
        outputs (map[str, map[str, str]]): A map of parsed outputs to emit from
            the `public-cluster` module to the root module.


    Returns:
        str: The contents of the file `outputs.tf`.
    """

    buf = boilerplate()

    buf += "\n\n"
    for name in sorted(outputs):
        desc = outputs[name].get("description", None)

        buf += 'output "{name}" {{\n'.format(
            name=name
        )
        buf += 'value = "${{module.kubernetes-engine.{name}}}"\n'.format(
            name=name
        )

        if desc:
            buf += 'description = "{desc}"\n'.format(
                desc=desc
            )

        buf += "}\n"

    return buf


def _copy_recursively(src, dest):
    for node in os.listdir(src):
        src_path = os.path.join(src, node)
        dest_path = os.path.join(dest, node)
        if os.path.isdir(src_path):
            if not os.path.exists(dest_path):
                os.mkdir(dest_path)
            _copy_recursively(src_path, dest_path)
        elif os.path.isfile(src_path):
            shutil.copyfile(src_path, dest_path)


def create_submodules():
    # Read `modules/*` for directories
    # For every directory, copy all files in `autogen/` there.
    modules = next(os.walk("./modules"))[1]
    for module in modules:
        dest_folder = os.path.join("./modules", module)
        _copy_recursively("./autogen", dest_folder)


def create_root_module_wrapper():
    with open("./modules/public-cluster/variables.tf") as fh:
        variables_text = fh.read()
        variables = hcl.loads(variables_text)['variable']

    with open("./modules/public-cluster/outputs.tf") as fh:
        outputs = hcl.loads(fh.read())['output']

    with open("./variables.tf", "w") as fh:
        fh.write(variables_text)

    with open("./main.tf", "w") as fh:
        fh.write(root_main_tf(variables))

    with open("./outputs.tf", "w") as fh:
        fh.write(root_outputs_tf(outputs))


def main(argv):
    create_submodules()
    create_root_module_wrapper()

    subprocess.call(["terraform", "fmt"])


if __name__ == "__main__":
    main(sys.argv)
